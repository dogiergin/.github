{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPXvSK7a9B1hgIQZUraagq7",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dogiergin/.github/blob/main/example\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "5P-jaYoYzspd",
        "outputId": "0b1d9749-073f-49e4-eed6-a69eef2749df"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'HelloSam'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ],
      "source": [
        "def greetings(name):\n",
        "  return 'Hello'  + name\n",
        "\n",
        "greetings('Sam')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def sum_points(num1,num2,num=0):\n",
        "  if num1<num2:\n",
        "    num = num2-num1 \n",
        "  elif num1==num2:\n",
        "     num=0\n",
        "  else:\n",
        "    num=num1-num2\n",
        "  return num\n",
        "  \n",
        "sum_points(15,8)\n",
        "#final= sum_points(9,8)\n",
        "#print(final)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rhyuSDKrwANf",
        "outputId": "d3190a36-56c1-43ef-ccf5-dc6b4b5c4733"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "birthday = \"4 September 1996\"\n",
        "place_of_birth = \" London \"\n",
        "current_city = \" London \"\n",
        "\n",
        "def print_introduction(birthday,place_of_birth,current_city):\n",
        "  return print('\"I was born on ' +birthday+' in '+ place_of_birth+ 'and now I live in'+ current_city +'.\"')\n",
        "\n",
        "def currentcity(city):\n",
        "  global current_city\n",
        "  current_city= city\n",
        "  return city\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r7aEFfVj0Apj",
        "outputId": "a30acfc8-150a-4127-9105-73a40a100011"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "New York \n",
            "\"I was born on 4 September 1996 in  London and now I live inNew York .\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def currentcity(city):\n",
        "  global current_city\n",
        "  current_city= city\n",
        "\n",
        "\n",
        "currentcity(' New York ')\n",
        "print(current_city)\n",
        "print_introduction(birthday,place_of_birth,current_city)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C6vOF2Db3c_e",
        "outputId": "46414b1b-3fec-492b-b9f8-14b01e5b9957"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " New York \n",
            "\"I was born on 4 September 1996 in  London and now I live in New York .\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "day = [1, 2, 3, 4, 5, 6, 7]\n",
        "avg_temperature = [14,9,3,11,18,27,6]\n",
        "\n",
        "sns.barplot(day,avg_temperature)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "lJgHvy4Z9jPC",
        "outputId": "5f36f29b-0b8d-4732-9c64-ac1a75581287"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f51f911c890>"
            ]
          },
          "metadata": {},
          "execution_count": 1
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "def km2mile(km):\n",
        "  print(km*1.60934)\n",
        "def mile2km(miles):\n",
        "  print(miles/1.60934)\n",
        "\n",
        "mile2km(12)\n",
        "\n",
        "km2mile(7.46)"
      ],
      "metadata": {
        "id": "VxTGyrGj-pYB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def pound_kilogram(quantity, mode):\n",
        "  if mode == 'pound2kg':\n",
        "      print(quantity %= 0.45359)\n",
        "      return quantity\n",
        "  else:\n",
        "    print(quantity *= 0.45359)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 131
        },
        "id": "AHMex4K4BsyE",
        "outputId": "b7dfb8ca-0d5c-40d6-bd6d-b16607321ef8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-86-5e6855d58e94>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    print(quantity %= 0.45359)\u001b[0m\n\u001b[0m                    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "G4PzbZ63GpKm"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}